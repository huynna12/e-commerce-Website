# Generated by Django 5.2.1 on 2025-06-06 21:54

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(db_index=True, max_length=100)),
                ('item_summary', models.CharField(default='Product summary', help_text='Short summary for listings and search results', max_length=200)),
                ('item_description', models.TextField(default='Product description', help_text='Detailed product description', max_length=2000)),
                ('technical_specs', models.JSONField(blank=True, default=dict, help_text='Technical specifications as key-value pairs')),
                ('item_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('item_quantity', models.PositiveIntegerField(default=0)),
                ('item_image', models.ImageField(default='item_images/default.png', upload_to='item_images/')),
                ('item_images', models.JSONField(blank=True, default=list, help_text='Additional image URLs')),
                ('item_category', models.CharField(choices=[('electronics', 'Electronics'), ('clothing', 'Clothing & Fashion'), ('books', 'Books & Media'), ('home_garden', 'Home & Garden'), ('sports_fitness', 'Sports & Fitness'), ('toys_games', 'Toys & Games'), ('automotive', 'Automotive'), ('beauty_health', 'Beauty & Health'), ('food_beverages', 'Food & Beverages'), ('art_crafts', 'Art & Crafts'), ('other', 'Other')], db_index=True, default='other', max_length=50)),
                ('custom_category', models.CharField(blank=True, help_text="Custom category when 'Other' selected", max_length=100, null=True)),
                ('item_sku', models.CharField(blank=True, max_length=50, unique=True)),
                ('item_origin', models.CharField(default='Unknown', max_length=100)),
                ('item_condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], default='new', max_length=20)),
                ('item_weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('item_dimensions', models.JSONField(blank=True, default=dict, help_text='Dimensions as {length, width, height} in cm')),
                ('is_featured', models.BooleanField(db_index=True, default=False)),
                ('is_available', models.BooleanField(db_index=True, default=True)),
                ('is_on_sale', models.BooleanField(db_index=True, default=False)),
                ('is_digital', models.BooleanField(default=False, help_text='Digital product (no shipping required)')),
                ('sale_price', models.DecimalField(blank=True, decimal_places=2, help_text='Sale price (must be lower than regular price)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('sale_start_date', models.DateTimeField(blank=True, null=True)),
                ('sale_end_date', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('times_purchased', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Optional review comment')),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Review from verified buyer')),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='How many users found this review helpful')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='items.item')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['item_category', 'is_available'], name='items_item_item_ca_63b67e_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['custom_category', 'is_available'], name='items_item_custom__72e548_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['seller', 'is_available'], name='items_item_seller__af27db_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['is_featured', 'is_available'], name='items_item_is_feat_24292e_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['is_on_sale', 'is_available'], name='items_item_is_on_s_35deb6_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['item_price'], name='items_item_item_pr_7564fe_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['view_count'], name='items_item_view_co_b9e501_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['times_purchased'], name='items_item_times_p_11abbf_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['item', 'rating'], name='items_revie_item_id_c94854_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewer'], name='items_revie_reviewe_d4e301_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('item', 'reviewer')},
        ),
    ]
